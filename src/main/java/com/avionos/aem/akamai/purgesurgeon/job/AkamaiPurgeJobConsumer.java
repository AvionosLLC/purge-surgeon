package com.avionos.aem.akamai.purgesurgeon.job;

import com.avionos.aem.akamai.purgesurgeon.client.AkamaiEdgeGridClient;
import com.google.common.base.Stopwatch;
import org.apache.sling.event.jobs.Job;
import org.apache.sling.event.jobs.consumer.JobConsumer;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.net.SocketTimeoutException;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * The Akamai Purge Job Consumer is responsible for consuming events generated by the replication event handler.
 */
@Component(immediate = true,
    service = JobConsumer.class,
    property = {
        JobConsumer.PROPERTY_TOPICS + "=" + AkamaiPurgeJobConsumer.JOB_TOPIC_INVALIDATE,
        JobConsumer.PROPERTY_TOPICS + "=" + AkamaiPurgeJobConsumer.JOB_TOPIC_DELETE,
    })
public final class AkamaiPurgeJobConsumer implements JobConsumer {

    public static final String JOB_TOPIC_INVALIDATE = "com/avionos/aem/akamai/purgesurgeon/events/invalidate";

    public static final String JOB_TOPIC_DELETE = "com/avionos/aem/akamai/purgesurgeon/events/delete";

    public static final String PROPERTY_URLS = "urls";

    private static final Logger LOG = LoggerFactory.getLogger(AkamaiPurgeJobConsumer.class);

    @Reference
    private AkamaiEdgeGridClient edgeGridClient;

    /**
     * Process the purge job via the Akamai Purge service.
     *
     * @param job purge job
     * @return OK job result if successful, CANCEL result if unsuccessful
     */
    @Override
    public JobResult process(final Job job) {
        final Stopwatch stopwatch = Stopwatch.createStarted();

        final List<String> urls = Arrays.asList(job.getProperty(PROPERTY_URLS, new String[0]));

        LOG.info("processing akamai purge job for URLs : {}", urls);

        JobResult result;

        try {
            if (JOB_TOPIC_INVALIDATE.equals(job.getTopic())) {
                edgeGridClient.invalidateUrls(urls);
            } else {
                edgeGridClient.deleteUrls(urls);
            }

            result = JobResult.OK;
        } catch (URISyntaxException | IOException e) {
            LOG.error("error invalidating akamai URLs : {}", urls, e);

            if (e instanceof SocketTimeoutException) {
                // if socket timeout, retry job
                result = JobResult.FAILED;
            } else {
                // otherwise, cancel job to prevent retries
                result = JobResult.CANCEL;
            }
        }

        final long duration = stopwatch.elapsed(TimeUnit.SECONDS);

        LOG.info("finished processing akamai purge job in {}s with result : {}", duration, result);

        return result;
    }
}
